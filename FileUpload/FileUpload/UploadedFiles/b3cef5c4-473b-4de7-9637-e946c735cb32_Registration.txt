
CREATE TABLE REGSTRTN_PROFL
(
REGSTRTN_DT DATE NOT NULL ,
ACTV_IND CHAR(1) NULL ,
CREATE_USER_ID CHAR(18) NULL ,
CREATE_DT TIMESTAMP(6) NULL ,
UPDT_DT TIMESTAMP(6) NULL ,
UPDT_USER_ID CHAR(18) NULL ,
LDAP_REGISTRD_USER_ID INTEGER NOT NULL ,
USER_PHN_NBR CHAR(18) NULL ,
USER_NM_TXT VARCHAR2(255) NOT NULL ,
SEQ_NBR INTEGER NOT NULL
);

CREATE UNIQUE INDEX XPKPortal_Registered__Profile ON REGSTRTN_PROFL
(LDAP_REGISTRD_USER_ID ASC,SEQ_NBR ASC);

ALTER TABLE REGSTRTN_PROFL
ADD CONSTRAINT XPKPortal_Registered__Profile PRIMARY KEY (LDAP_REGISTRD_USER_ID,SEQ_NBR);

CREATE TABLE REGSTRTN_USER_TYP
(
REGSTRTN_USER_TYP_CD VARCHAR2(20) NOT NULL ,
REGSTRTN_USER_TYP_DESC VARCHAR2(255) NULL ,
CREATE_USER_ID CHAR(18) NULL ,
CREATE_DT TIMESTAMP(6) NULL ,
UPDT_DT TIMESTAMP(6) NULL ,
UPDT_USER_ID CHAR(18) NULL
);

CREATE UNIQUE INDEX XPKPortal_User_Type ON REGSTRTN_USER_TYP
(REGSTRTN_USER_TYP_CD ASC);

ALTER TABLE REGSTRTN_USER_TYP
ADD CONSTRAINT XPKPortal_User_Type PRIMARY KEY (REGSTRTN_USER_TYP_CD);

CREATE TABLE PORTAL_USER
(
REGSTRTN_USER_TYP_CD VARCHAR2(20) NOT NULL ,
LDAP_REGISTRD_USER_ID INTEGER NOT NULL ,
USER_FRST_NM VARCHAR2(50) NOT NULL ,
USER_LAST_NM VARCHAR2(50) NOT NULL ,
BRTH_DT DATE NULL ,
EMAIL_ADDR_TXT VARCHAR2(200) NOT NULL ,
ACTVN_PHN_NBR CHAR(18) NOT NULL ,
LOB_CD VARCHAR2(4) NULL ,
MBR_ID CHAR(18) NULL ,
CREATE_USER_ID CHAR(18) NULL ,
CREATE_DT TIMESTAMP(6) NULL ,
UPDT_DT TIMESTAMP(6) NULL ,
UPDT_USER_ID CHAR(18) NULL
);

CREATE UNIQUE INDEX XPKPortal_User ON PORTAL_USER
(LDAP_REGISTRD_USER_ID ASC);

ALTER TABLE PORTAL_USER
ADD CONSTRAINT XPKPortal_User PRIMARY KEY (LDAP_REGISTRD_USER_ID);

ALTER TABLE REGSTRTN_PROFL
ADD (CONSTRAINT R_99 FOREIGN KEY (LDAP_REGISTRD_USER_ID) REFERENCES PORTAL_USER (LDAP_REGISTRD_USER_ID));

ALTER TABLE PORTAL_USER
ADD (CONSTRAINT R_98 FOREIGN KEY (REGSTRTN_USER_TYP_CD) REFERENCES REGSTRTN_USER_TYP (REGSTRTN_USER_TYP_CD));

CREATE TRIGGER tD_REGSTRTN_PROFL AFTER DELETE ON REGSTRTN_PROFL for each row
-- ERwin Builtin Trigger
-- DELETE trigger on REGSTRTN_PROFL
DECLARE NUMROWS INTEGER;
BEGIN
/* ERwin Builtin Trigger */
/* REGSTRTN_PROFL REGISTRD_USER_RELATNSHP on parent delete restrict */
/* ERWIN_RELATION:CHECKSUM="0003bc11", PARENT_OWNER="", PARENT_TABLE="REGSTRTN_PROFL"
CHILD_OWNER="", CHILD_TABLE="REGISTRD_USER_RELATNSHP"
P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
FK_CONSTRAINT="R_92", FK_COLUMNS="REGISTRD_USER_ID_2""SEQ_NBR" */
SELECT count(*) INTO NUMROWS
FROM REGISTRD_USER_RELATNSHP
WHERE
/* %JoinFKPK(REGISTRD_USER_RELATNSHP,:%Old," = "," AND") */
REGISTRD_USER_RELATNSHP.REGISTRD_USER_ID_2 = :old.LDAP_REGISTRD_USER_ID AND
REGISTRD_USER_RELATNSHP.SEQ_NBR = :old.SEQ_NBR;
IF (NUMROWS > 0)
THEN
raise_application_error(
-20001,
'Cannot delete REGSTRTN_PROFL because REGISTRD_USER_RELATNSHP exists.'
);
END IF;

/* ERwin Builtin Trigger */
/* REGSTRTN_PROFL REGISTRD_USER_RELATNSHP on parent delete restrict */
/* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="REGSTRTN_PROFL"
CHILD_OWNER="", CHILD_TABLE="REGISTRD_USER_RELATNSHP"
P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
FK_CONSTRAINT="R_91", FK_COLUMNS="REGISTRD_USER_ID_1""SEQ_NBR" */
SELECT count(*) INTO NUMROWS
FROM REGISTRD_USER_RELATNSHP
WHERE
/* %JoinFKPK(REGISTRD_USER_RELATNSHP,:%Old," = "," AND") */
REGISTRD_USER_RELATNSHP.REGISTRD_USER_ID_1 = :old.LDAP_REGISTRD_USER_ID AND
REGISTRD_USER_RELATNSHP.SEQ_NBR = :old.SEQ_NBR;
IF (NUMROWS > 0)
THEN
raise_application_error(
-20001,
'Cannot delete REGSTRTN_PROFL because REGISTRD_USER_RELATNSHP exists.'
);
END IF;

/* ERwin Builtin Trigger */
/* REGSTRTN_PROFL REGISTRD_USER_PWD on parent delete restrict */
/* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="REGSTRTN_PROFL"
CHILD_OWNER="", CHILD_TABLE="REGISTRD_USER_PWD"
P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
FK_CONSTRAINT="R_76", FK_COLUMNS="LDAP_REGISTRD_USER_ID""SEQ_NBR" */
SELECT count(*) INTO NUMROWS
FROM REGISTRD_USER_PWD
WHERE
/* %JoinFKPK(REGISTRD_USER_PWD,:%Old," = "," AND") */
REGISTRD_USER_PWD.LDAP_REGISTRD_USER_ID = :old.LDAP_REGISTRD_USER_ID AND
REGISTRD_USER_PWD.SEQ_NBR = :old.SEQ_NBR;
IF (NUMROWS > 0)
THEN
raise_application_error(
-20001,
'Cannot delete REGSTRTN_PROFL because REGISTRD_USER_PWD exists.'
);
END IF;

-- ERwin Builtin Trigger
END;
/

CREATE TRIGGER tI_REGSTRTN_PROFL BEFORE INSERT ON REGSTRTN_PROFL for each row
-- ERwin Builtin Trigger
-- INSERT trigger on REGSTRTN_PROFL
DECLARE NUMROWS INTEGER;
BEGIN
/* ERwin Builtin Trigger */
/* PORTAL_USER REGSTRTN_PROFL on child insert restrict */
/* ERWIN_RELATION:CHECKSUM="00010185", PARENT_OWNER="", PARENT_TABLE="PORTAL_USER"
CHILD_OWNER="", CHILD_TABLE="REGSTRTN_PROFL"
P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
FK_CONSTRAINT="R_99", FK_COLUMNS="LDAP_REGISTRD_USER_ID" */
SELECT count(*) INTO NUMROWS
FROM PORTAL_USER
WHERE
/* %JoinFKPK(:%New,PORTAL_USER," = "," AND") */
:new.LDAP_REGISTRD_USER_ID = PORTAL_USER.LDAP_REGISTRD_USER_ID;
IF (
/* %NotnullFK(:%New," IS NOT NULL AND") */

NUMROWS = 0
)
THEN
raise_application_error(
-20002,
'Cannot insert REGSTRTN_PROFL because PORTAL_USER does not exist.'
);
END IF;

-- ERwin Builtin Trigger
END;
/

CREATE TRIGGER tU_REGSTRTN_PROFL AFTER UPDATE ON REGSTRTN_PROFL for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on REGSTRTN_PROFL
DECLARE NUMROWS INTEGER;
BEGIN
/* ERwin Builtin Trigger */
/* REGSTRTN_PROFL REGISTRD_USER_RELATNSHP on parent update restrict */
/* ERWIN_RELATION:CHECKSUM="0005a0a7", PARENT_OWNER="", PARENT_TABLE="REGSTRTN_PROFL"
CHILD_OWNER="", CHILD_TABLE="REGISTRD_USER_RELATNSHP"
P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
FK_CONSTRAINT="R_92", FK_COLUMNS="REGISTRD_USER_ID_2""SEQ_NBR" */
IF
/* %JoinPKPK(:%Old,:%New," <> "," OR ") */
:old.LDAP_REGISTRD_USER_ID <> :new.LDAP_REGISTRD_USER_ID OR
:old.SEQ_NBR <> :new.SEQ_NBR
THEN
SELECT count(*) INTO NUMROWS
FROM REGISTRD_USER_RELATNSHP
WHERE
/* %JoinFKPK(REGISTRD_USER_RELATNSHP,:%Old," = "," AND") */
REGISTRD_USER_RELATNSHP.REGISTRD_USER_ID_2 = :old.LDAP_REGISTRD_USER_ID AND
REGISTRD_USER_RELATNSHP.SEQ_NBR = :old.SEQ_NBR;
IF (NUMROWS > 0)
THEN
raise_application_error(
-20005,
'Cannot update REGSTRTN_PROFL because REGISTRD_USER_RELATNSHP exists.'
);
END IF;
END IF;

/* ERwin Builtin Trigger */
/* REGSTRTN_PROFL REGISTRD_USER_RELATNSHP on parent update restrict */
/* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="REGSTRTN_PROFL"
CHILD_OWNER="", CHILD_TABLE="REGISTRD_USER_RELATNSHP"
P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
FK_CONSTRAINT="R_91", FK_COLUMNS="REGISTRD_USER_ID_1""SEQ_NBR" */
IF
/* %JoinPKPK(:%Old,:%New," <> "," OR ") */
:old.LDAP_REGISTRD_USER_ID <> :new.LDAP_REGISTRD_USER_ID OR
:old.SEQ_NBR <> :new.SEQ_NBR
THEN
SELECT count(*) INTO NUMROWS
FROM REGISTRD_USER_RELATNSHP
WHERE
/* %JoinFKPK(REGISTRD_USER_RELATNSHP,:%Old," = "," AND") */
REGISTRD_USER_RELATNSHP.REGISTRD_USER_ID_1 = :old.LDAP_REGISTRD_USER_ID AND
REGISTRD_USER_RELATNSHP.SEQ_NBR = :old.SEQ_NBR;
IF (NUMROWS > 0)
THEN
raise_application_error(
-20005,
'Cannot update REGSTRTN_PROFL because REGISTRD_USER_RELATNSHP exists.'
);
END IF;
END IF;

/* ERwin Builtin Trigger */
/* REGSTRTN_PROFL REGISTRD_USER_PWD on parent update restrict */
/* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="REGSTRTN_PROFL"
CHILD_OWNER="", CHILD_TABLE="REGISTRD_USER_PWD"
P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
FK_CONSTRAINT="R_76", FK_COLUMNS="LDAP_REGISTRD_USER_ID""SEQ_NBR" */
IF
/* %JoinPKPK(:%Old,:%New," <> "," OR ") */
:old.LDAP_REGISTRD_USER_ID <> :new.LDAP_REGISTRD_USER_ID OR
:old.SEQ_NBR <> :new.SEQ_NBR
THEN
SELECT count(*) INTO NUMROWS
FROM REGISTRD_USER_PWD
WHERE
/* %JoinFKPK(REGISTRD_USER_PWD,:%Old," = "," AND") */
REGISTRD_USER_PWD.LDAP_REGISTRD_USER_ID = :old.LDAP_REGISTRD_USER_ID AND
REGISTRD_USER_PWD.SEQ_NBR = :old.SEQ_NBR;
IF (NUMROWS > 0)
THEN
raise_application_error(
-20005,
'Cannot update REGSTRTN_PROFL because REGISTRD_USER_PWD exists.'
);
END IF;
END IF;

/* ERwin Builtin Trigger */
/* PORTAL_USER REGSTRTN_PROFL on child update restrict */
/* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="PORTAL_USER"
CHILD_OWNER="", CHILD_TABLE="REGSTRTN_PROFL"
P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
FK_CONSTRAINT="R_99", FK_COLUMNS="LDAP_REGISTRD_USER_ID" */
SELECT count(*) INTO NUMROWS
FROM PORTAL_USER
WHERE
/* %JoinFKPK(:%New,PORTAL_USER," = "," AND") */
:new.LDAP_REGISTRD_USER_ID = PORTAL_USER.LDAP_REGISTRD_USER_ID;
IF (
/* %NotnullFK(:%New," IS NOT NULL AND") */

NUMROWS = 0
)
THEN
raise_application_error(
-20007,
'Cannot update REGSTRTN_PROFL because PORTAL_USER does not exist.'
);
END IF;

-- ERwin Builtin Trigger
END;
/

CREATE TRIGGER tD_REGSTRTN_USER_TYP AFTER DELETE ON REGSTRTN_USER_TYP for each row
-- ERwin Builtin Trigger
-- DELETE trigger on REGSTRTN_USER_TYP
DECLARE NUMROWS INTEGER;
BEGIN
/* ERwin Builtin Trigger */
/* REGSTRTN_USER_TYP PORTAL_USER on parent delete restrict */
/* ERWIN_RELATION:CHECKSUM="0000f6a0", PARENT_OWNER="", PARENT_TABLE="REGSTRTN_USER_TYP"
CHILD_OWNER="", CHILD_TABLE="PORTAL_USER"
P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
FK_CONSTRAINT="R_98", FK_COLUMNS="REGSTRTN_USER_TYP_CD" */
SELECT count(*) INTO NUMROWS
FROM PORTAL_USER
WHERE
/* %JoinFKPK(PORTAL_USER,:%Old," = "," AND") */
PORTAL_USER.REGSTRTN_USER_TYP_CD = :old.REGSTRTN_USER_TYP_CD;
IF (NUMROWS > 0)
THEN
raise_application_error(
-20001,
'Cannot delete REGSTRTN_USER_TYP because PORTAL_USER exists.'
);
END IF;

-- ERwin Builtin Trigger
END;
/

CREATE TRIGGER tU_REGSTRTN_USER_TYP AFTER UPDATE ON REGSTRTN_USER_TYP for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on REGSTRTN_USER_TYP
DECLARE NUMROWS INTEGER;
BEGIN
/* ERwin Builtin Trigger */
/* REGSTRTN_USER_TYP PORTAL_USER on parent update restrict */
/* ERWIN_RELATION:CHECKSUM="00012f69", PARENT_OWNER="", PARENT_TABLE="REGSTRTN_USER_TYP"
CHILD_OWNER="", CHILD_TABLE="PORTAL_USER"
P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
FK_CONSTRAINT="R_98", FK_COLUMNS="REGSTRTN_USER_TYP_CD" */
IF
/* %JoinPKPK(:%Old,:%New," <> "," OR ") */
:old.REGSTRTN_USER_TYP_CD <> :new.REGSTRTN_USER_TYP_CD
THEN
SELECT count(*) INTO NUMROWS
FROM PORTAL_USER
WHERE
/* %JoinFKPK(PORTAL_USER,:%Old," = "," AND") */
PORTAL_USER.REGSTRTN_USER_TYP_CD = :old.REGSTRTN_USER_TYP_CD;
IF (NUMROWS > 0)
THEN
raise_application_error(
-20005,
'Cannot update REGSTRTN_USER_TYP because PORTAL_USER exists.'
);
END IF;
END IF;

-- ERwin Builtin Trigger
END;
/

CREATE TRIGGER tD_PORTAL_USER AFTER DELETE ON PORTAL_USER for each row
-- ERwin Builtin Trigger
-- DELETE trigger on PORTAL_USER
DECLARE NUMROWS INTEGER;
BEGIN
/* ERwin Builtin Trigger */
/* PORTAL_USER REGSTRTN_PROFL on parent delete restrict */
/* ERWIN_RELATION:CHECKSUM="0000fbbf", PARENT_OWNER="", PARENT_TABLE="PORTAL_USER"
CHILD_OWNER="", CHILD_TABLE="REGSTRTN_PROFL"
P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
FK_CONSTRAINT="R_99", FK_COLUMNS="LDAP_REGISTRD_USER_ID" */
SELECT count(*) INTO NUMROWS
FROM REGSTRTN_PROFL
WHERE
/* %JoinFKPK(REGSTRTN_PROFL,:%Old," = "," AND") */
REGSTRTN_PROFL.LDAP_REGISTRD_USER_ID = :old.LDAP_REGISTRD_USER_ID;
IF (NUMROWS > 0)
THEN
raise_application_error(
-20001,
'Cannot delete PORTAL_USER because REGSTRTN_PROFL exists.'
);
END IF;

-- ERwin Builtin Trigger
END;
/

CREATE TRIGGER tI_PORTAL_USER BEFORE INSERT ON PORTAL_USER for each row
-- ERwin Builtin Trigger
-- INSERT trigger on PORTAL_USER
DECLARE NUMROWS INTEGER;
BEGIN
/* ERwin Builtin Trigger */
/* REGSTRTN_USER_TYP PORTAL_USER on child insert restrict */
/* ERWIN_RELATION:CHECKSUM="00011a50", PARENT_OWNER="", PARENT_TABLE="REGSTRTN_USER_TYP"
CHILD_OWNER="", CHILD_TABLE="PORTAL_USER"
P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
FK_CONSTRAINT="R_98", FK_COLUMNS="REGSTRTN_USER_TYP_CD" */
SELECT count(*) INTO NUMROWS
FROM REGSTRTN_USER_TYP
WHERE
/* %JoinFKPK(:%New,REGSTRTN_USER_TYP," = "," AND") */
:new.REGSTRTN_USER_TYP_CD = REGSTRTN_USER_TYP.REGSTRTN_USER_TYP_CD;
IF (
/* %NotnullFK(:%New," IS NOT NULL AND") */

NUMROWS = 0
)
THEN
raise_application_error(
-20002,
'Cannot insert PORTAL_USER because REGSTRTN_USER_TYP does not exist.'
);
END IF;

-- ERwin Builtin Trigger
END;
/

CREATE TRIGGER tU_PORTAL_USER AFTER UPDATE ON PORTAL_USER for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on PORTAL_USER
DECLARE NUMROWS INTEGER;
BEGIN
/* ERwin Builtin Trigger */
/* PORTAL_USER REGSTRTN_PROFL on parent update restrict */
/* ERWIN_RELATION:CHECKSUM="00025aee", PARENT_OWNER="", PARENT_TABLE="PORTAL_USER"
CHILD_OWNER="", CHILD_TABLE="REGSTRTN_PROFL"
P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
FK_CONSTRAINT="R_99", FK_COLUMNS="LDAP_REGISTRD_USER_ID" */
IF
/* %JoinPKPK(:%Old,:%New," <> "," OR ") */
:old.LDAP_REGISTRD_USER_ID <> :new.LDAP_REGISTRD_USER_ID
THEN
SELECT count(*) INTO NUMROWS
FROM REGSTRTN_PROFL
WHERE
/* %JoinFKPK(REGSTRTN_PROFL,:%Old," = "," AND") */
REGSTRTN_PROFL.LDAP_REGISTRD_USER_ID = :old.LDAP_REGISTRD_USER_ID;
IF (NUMROWS > 0)
THEN
raise_application_error(
-20005,
'Cannot update PORTAL_USER because REGSTRTN_PROFL exists.'
);
END IF;
END IF;

/* ERwin Builtin Trigger */
/* REGSTRTN_USER_TYP PORTAL_USER on child update restrict */
/* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="REGSTRTN_USER_TYP"
CHILD_OWNER="", CHILD_TABLE="PORTAL_USER"
P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
FK_CONSTRAINT="R_98", FK_COLUMNS="REGSTRTN_USER_TYP_CD" */
SELECT count(*) INTO NUMROWS
FROM REGSTRTN_USER_TYP
WHERE
/* %JoinFKPK(:%New,REGSTRTN_USER_TYP," = "," AND") */
:new.REGSTRTN_USER_TYP_CD = REGSTRTN_USER_TYP.REGSTRTN_USER_TYP_CD;
IF (
/* %NotnullFK(:%New," IS NOT NULL AND") */

NUMROWS = 0
)
THEN
raise_application_error(
-20007,
'Cannot update PORTAL_USER because REGSTRTN_USER_TYP does not exist.'
);
END IF;

-- ERwin Builtin Trigger
END;
/